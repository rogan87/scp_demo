 /*
 * ConfigData.config - user configuration data for this project 
 *
 * Copyright(c) 2007-2008 MDS Technology Co.,Ltd.
 * All rights reserved.
 *
 * This software contains confidential information of MDS Technology Co.,Ltd.
 * and unauthorized distribution of this software, or any portion of it, are 
 * prohibited.
 */
 
#include <NEOS178S.h>
#include <config/ConfigRecord.h>
#include <config/Memory.h>
#include "BspMemoryMap.data"
#include <TFX/TFX.h>

/* System configuration data */
#define CFG_INT_STACK_SIZE              1024
#define CFG_EXC_STACK_SIZE              1024
#define CFG_USER_STACK_SIZE             1024
#define CFG_SYSTEM_CLOCK                1000
#define CFG_NUM_OF_THREAD               16 
#define CFG_NUM_OF_SEMAPHORE            32
#define CFG_NUM_OF_TIMER                8
#define CFG_NUM_OF_MESSAGE_QUEUE        8
#define CFG_NUM_OF_MEMORYPOOL           8
#define CFG_NUM_OF_THREAD_ERRORS        32

/* System memory pool configuration */
#define CFG_SYSTEM_MEMPOOL_START        0x00000000
#define CFG_SYSTEM_MEMPOOL_END          0x00006000

/* User memory pool configuration */
#define CFG_USER_MEMPOOL_A_START          0x4003E000
#define CFG_USER_MEMPOOL_A_END            0x4003F000

#define CFG_USER_MEMPOOL_B_START          0x4003F000
#define CFG_USER_MEMPOOL_B_END            0x40040000

/* System Level error actions */
#define CFG_SYSTEM_CONF_ERROR_ACTION    SYSTEM_RESTART
#define CFG_SYSTEM_FUNC_ERROR_ACTION    SYSTEM_RESTART
#define CFG_SYSTEM_LEVEL_HANDLER        TestSystemLevelErrorHandler

/* External function declarations */
extern void TestSystemLevelErrorHandler();

/*
 * Kernel object storage
 */
static ThreadStruct       threadObjectStorage[CFG_NUM_OF_THREAD] __attribute__((section(".configdata.storage"))) ;
static SemaphoreStruct    semaphoreObectStorage[CFG_NUM_OF_SEMAPHORE] __attribute__((section(".configdata.storage"))) ;
static TimerStruct        timerObjectStorage[CFG_NUM_OF_TIMER] __attribute__((section(".configdata.storage"))) ;
static MessageQueueStruct messageQueueObjectStorage[CFG_NUM_OF_MESSAGE_QUEUE] __attribute__((section(".configdata.storage"))) ;
static MemoryPoolStruct   memoryPoolObjectStorage[CFG_NUM_OF_MEMORYPOOL] __attribute__((section(".configdata.storage")));
static ThreadError        threadErrorPool[CFG_NUM_OF_THREAD_ERRORS] __attribute__((section(".configdata.storage")));

/* 
 * System memory pool configuration record 
 */
const MemoryReservation systemMemoryRegion __attribute__((section(".configdata"))) =
{
    CFG_SYSTEM_MEMPOOL_START,           /* start address of the system memory pool */
    CFG_SYSTEM_MEMPOOL_END,             /* end address of the system memory pool */
    TRUE,                               /* memory attributes of the system memory pool */
    "SystemMemoryPool",                 /* name of the system memory pool */
};

/*
 * User defined memory pool configuration record
 */
const MemoryReservation userMemoryRegion[] __attribute__((section(".configdata"))) =
{
    {
        CFG_USER_MEMPOOL_A_START,           /* start address of the system memory pool */
        CFG_USER_MEMPOOL_A_END,             /* end address of the system memory pool */
        FALSE,                              /* memory attributes of the system memory pool */
        "MPA",                              /* name of the system memory pool */
    },
    {
        CFG_USER_MEMPOOL_B_START,           /* start address of the system memory pool */
        CFG_USER_MEMPOOL_B_END,             /* end address of the system memory pool */
        TRUE,                               /* memory attributes of the system memory pool */
        "MPB",                              /* name of the system memory pool */
    },
};

/*
 * System Health monitor table
 */
const SystemHmTable systemHmTable  __attribute__((section(".configdata"))) =
{
    CFG_SYSTEM_CONF_ERROR_ACTION,
    CFG_SYSTEM_FUNC_ERROR_ACTION,
    (Address)CFG_SYSTEM_LEVEL_HANDLER
};

/* Configuration data */
const ConfigData systemConfigRecord __attribute__((section(".configrecord")))=
{
    CFG_EXC_STACK_SIZE,
    CFG_INT_STACK_SIZE,
    CFG_USER_STACK_SIZE,
    CFG_SYSTEM_CLOCK,
    CFG_NUM_OF_THREAD,
    CFG_NUM_OF_SEMAPHORE,
    CFG_NUM_OF_TIMER,
    CFG_NUM_OF_MESSAGE_QUEUE,
    CFG_NUM_OF_MEMORYPOOL,
    CFG_NUM_OF_THREAD_ERRORS,
    (void *)&systemMemoryRegion,
    (void *)userMemoryRegion,
    2,
    (void *)NULL,
    0, 
    (void *)&systemHmTable,
    (void *)&threadObjectStorage[0],
    (void *)&semaphoreObectStorage[0],
    (void *)&timerObjectStorage[0],
    (void *)&messageQueueObjectStorage[0],
    (void *)&memoryPoolObjectStorage[0],
    (void *)&threadErrorPool,
};

/**
 * TestSystemLevelErrorHandler - user defined system level error handler
 * 
 * This routine will be called when system level error occurrs.
 */

void
TestSystemLevelErrorHandler(ErrorCode errorCode, ErrorMessage *message, Size messageSize,
    Address failedAddress, Thread failedThread, IRQ failedIrq)
{
    DebugPuts("\n**** System Level Error ****\n");
    DebugPuts((char *)message);
    printk("\n[[TFXTestName]] ");
    printk("  name:    %s\n", g_TestIds[0]->tctName);
    printk("\n[[TFXTestVersion]] ");
    printk("  version: %s\n", g_TestIds[0]->testVersion);
    DebugPuts("\n[[TFXTestResult]] ");
    DebugPuts("SYSTEM ERROR HANG 0 0\n");
    DebugPuts("\n[[TFXExit]]\n");
    TFXDelayByBusyLoop(1000000000ULL);
    TFXReset();
}

