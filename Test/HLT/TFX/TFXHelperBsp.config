/*
 * BspConfig.c - mpc567x-evb BSP configuration file
 *
 * Copyright(c) 2017 Hancom MDS Inc.
 * All rights reserved.
 */

#include <NEOS178STypes.h>
#include <asp/Exception.h>
#include <asp/Cpu.h>
#include <bsp/Bsp.h>
#include <asp/AssemblyLib.h>
#include <asp/powerpc/cpu/mpc567x.h>
#include "BspConfig.h"

/* external functions */
extern void BspTimerInitialize(void);
extern void SystemClockModuleInitialize(void);
extern void MmuPostInitialize(void);

/* Extern variables */
extern UInt32 excVecPrefixOffset;

/* Global variables */
UInt32  _ppcDCacheSize          = (16 * 1024);
UInt32  _ppcDCacheAlignSize     = 32;
UInt32  _ppcDCacheLineNum       = (128 * 4);
UInt32  _ppcICacheSize          = (16 * 1024);
UInt32  _ppcICacheAlignSize     = 32;
UInt32  _ppcICacheLineNum       = (128 * 4);
UInt32  _cacheReadOrigin        = 0x100000;

static void (*bspStopCallback)(void) = NULL;
static void (*bspResetCallback)(void) = NULL;

/* include BSP specific drivers */
#include <drivers/intrctrl/Mpc567xInterrupt.c>

/**
 * BspEarlyInitialize - early initialize the target hardware
 *
 * DESCRIPTION
 *  This routine initializes basic features of the target board.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_EARLYINITIALIZE -> SDD_BSP_0010]
 *
 * RETURNS
 *  N/A
 *
 * ERRORS
 *  N/A
 */

void
BspEarlyInitialize(void)
{
    UInt32 hid0Value;

    /* disable L1 I-cache */
    PpcSetL1CSR1(PpcGetL1CSR1() & ~L1CSR_CE);
    
    hid0Value = PpcGetHid0();
    
    /* initialize machine check pin */
    hid0Value |= HID0_EMCP;
    
    /* set the HID0 to configure platform specific features */
    PpcSetHid0(hid0Value);

    /* initialize MMU */
    MmuEarlyInitialize();

    /* enable L1 I-cache */
    PpcSetL1CSR1(PpcGetL1CSR1() | L1CSR_CE);
    
    /* enable L1 D-cache */
    PpcSetL1CSR0(PpcGetL1CSR0() | L1CSR_CE);

    /* set exception vector prefix address */
    excVecPrefixOffset = SRAM_PHYS_BASE;
}

/**
 * BspInitialize - initialize the target hardware
 *
 * DESCRIPTION
 *  This routine initializes various features of the target board.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_INITIALIZE -> SDD_BSP_0010]
 *
 * RETURNS
 *  N/A
 *
 * ERRORS
 *  N/A
 */

void
BspInitialize(void)
{
    /* initialize system clock device initialization */
    BspTimerInitialize();

    /* initialize debugging console for printk */
    DebugConsoleInitialize();

    /* initialize interrupt controller */
    M567xInterruptInitialize();
}


/**
 * BspDeviceInitialize - initialize BSP devices
 *
 * DESCRIPTION
 *  This routine initializes BSP devices
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_DEVICEINITIALIZE -> SDD_BSP_0020]
 *
 * RETURNS
 *  N/A
 */

void
BspDeviceInitialize(void)
{
    MmuPostInitialize();
}


/**
 * BspPostInitialize - post initialize the BSP
 *
 * DESCRIPTION
 *  This routine initializes BSP devices.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_POSTINITIALIZE -> SDD_BSP_0020]
 *
 * RETURNS
 *  N/A
 */

void
BspPostInitialize(void)
{

}

/**
 * BspSetInterruptHandler - set interrupt handler
 * 
 * DESCRIPTION
 *  This routine sets external interrupt handler
 *
 * PARAMETERS
 *  intHandler - [in] interrupt handler
 *
 * TRACEABILITY
 *  [SCD_BSP_SETINTERRUPTHANDLER -> SDD_BSP_0030]
 *
 * RETURNS
 *  N/A
 */

void
BspSetInterruptHandler(ExceptionHandler intHandler)
{
    ExceptionSetHandler(EXC_OFF_INT, intHandler);
}


/**
 * BspGetSystemMemoryEnd - return end address of system memory
 *
 * DESCRIPTION
 *  This routine returns the end address of system memory
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_GETSYSTEMMEMORYEND -> SDD_BSP_0040]
 *
 * RETURNS
 *  Address of the system memory
 */

Size
BspGetSystemMemoryEnd(void)
{
    return (SRAM_PHYS_BASE + SRAM_SIZE);
}

Size
BspGetSystemMemoryStart(void)
{
    return (RAM_START_ADRS);
}

/**
 * BspGetBoardName - get board name
 *
 * DESCRIPTION
 *  This routine returns name of target board.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_GETBOARDNAME -> SDD_BSP_0050]
 *
 * RETURNS
 *  It returns "NGU8247".
 *
 * ERRORS
 *  N/A
 */

char*
BspGetBoardName(void)
{
    /* return name of target board */
    return "mpc567x-evb";
}


/**
 * BspReset -  reset board
 *
 * DESCRIPTION
 *  This routine is used for resetting the target board. It called by kernel
 *  to reset system.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_RESET -> SDD_BSP_0060]
 *
 * RETURNS
 *  N/A
 *
 * ERRORS
 *  N/A
 */

void
BspReset(void)
{
    if (bspResetCallback != NULL)
    {
        bspResetCallback();
    }

    BspRegWrite32(SIU_BASE_ADDR + SIU_SRCR_OFFSET,  (1<<31));    /* Generate software internal system reset. */

    while(1);
}


/**
 * BspStop - stop board
 *
 * DESCRIPTION
 *  This routine is used to stopping the target board.
 *
 * PARAMETERS
 *  N/A
 *
 * TRACEABILITY
 *  [SCD_BSP_STOP -> SDD_BSP_0070]
 *
 * RETURNS
 *  N/A
 *
 * ERRORS
 *  N/A
 */

void
BspStop(void)
{
    if (bspStopCallback != NULL)
    {
        bspStopCallback();
    }

    while(TRUE)
    {

    }
}

/**
 * TFXRegisterBspResetCallback - Register a callback to bspReset hook
 *
 * DESCRIPTION
 *  This routine registers a callback to bspReset hook
 *
 * PARAMETERS
 *  callback: a callback function to be regstered.
 *
 * TRACEABILITY
 *  N/A
 * 
 * RETURNS
 *  N/A
 * 
 * ERRORS
 *  N/A
 */
void
TFXRegisterBspResetCallback(void (*callback)(void))
{
    bspResetCallback = callback;
}

/**
 * TFXRegisterBspStopCallback - Register a callback to bspStop hook
 *
 * DESCRIPTION
 *  This routine registers a callback to bspStop hook
 *
 * PARAMETERS
 *  callback: a callback function to be regstered.
 *
 * TRACEABILITY
 *  N/A
 * 
 * RETURNS
 *  N/A
 * 
 * ERRORS
 *  N/A
 */
void 
TFXRegisterBspStopCallback(void (*callback)(void))
{
    bspStopCallback = callback;
}
